{"version":3,"sources":["Gallery/MyGallery.js","App.js","serviceWorker.js","index.js","images/full/irfan.jpg","images/full/arya.jpg","images/full/joker.jpg","images/full/witcher.jpg","images/thumbnail/irfan_tn.jpg","images/thumbnail/arya_tn.jpg","images/thumbnail/joker_tn.jpg","images/thumbnail/witcher_tn.jpg"],"names":["IMAGES","src","irfan","thumbnail","irfanTn","thumbnailWidth","thumbnailHeight","isSelected","caption","arya","aryaTn","joker","jokerTn","witcher","witcherTn","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","gridList","height","icon","color","cursor","maxWidth","Image","props","style","backgroundColor","boxSizing","opacity","MyGallery","useState","open","setOpen","currentIndex","setCurrentIndex","classes","handleOpenImage","index","className","GridList","cellHeight","cols","spacing","map","tile","GridListTile","key","img","onClick","alt","GridListTileBar","title","Dialog","onClose","aria-labelledby","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"4VAeMA,G,OACF,CAAC,CACGC,IAAKC,IACLC,UAAWC,IACXC,eAAgB,IAChBC,gBAAiB,IACjBC,YAAY,EACZC,QAAS,cAEb,CACIP,IAAKQ,IACLN,UAAWO,IACXL,eAAgB,IAChBC,gBAAiB,IACjBE,QAAS,cAGb,CACIP,IAAKU,IACLR,UAAWS,IACXP,eAAgB,IAChBC,gBAAiB,IACjBE,QAAS,SAEb,CACIP,IAAKY,IACLV,UAAWW,IACXT,eAAgB,IAChBC,gBAAiB,IACjBE,QAAS,iBAKXO,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,QAAS,OACTC,SAAU,OACVC,eAAgB,eAChBC,SAAU,UAEdC,SAAU,CAENC,OAAQ,KAEZC,KAAM,CACFC,MAAO,6BAEXvB,UAAW,CACPwB,OAAQ,UACRC,SAAU,YA0EZC,EAAQ,SAACC,GAAD,OACV,uCACIC,MAAO,CACHC,gBAAiB,OACjBC,UAAW,aACXX,SAAU,SACV,SAAU,CACNY,QAAS,MAGbJ,KAKGK,EApFG,SAAAL,GAAU,IAAD,EAECM,oBAAS,GAFV,mBAEhBC,EAFgB,KAEVC,EAFU,OAGiBF,mBAAS,GAH1B,mBAGhBG,EAHgB,KAGFC,EAHE,KAKjBC,EAAU1B,IAEV2B,EAAkB,SAACC,GACrBL,GAAQ,GAERE,EAAgBG,IAQpB,OACI,yBAAKC,UAAWH,EAAQvB,MACpB,kBAAC2B,EAAA,EAAD,CAAUC,WAAY,IAAKC,KAAM,EAAGC,QAAS,GAAIJ,UAAWH,EAAQlB,UAC/DvB,EAAOiD,KAAI,SAACC,EAAMP,GAAP,OACR,kBAACQ,EAAA,EAAD,CACIC,IAAKF,EAAKG,IACVN,KAAMG,EAAKH,MAAQ,EACnBH,UAAWH,EAAQhB,MAEnB,kBAAC,EAAD,CACIxB,IAAKiD,EAAK/C,UACVmD,QAAS,kBAAMZ,EAAgBC,KAG/B,yBACI1C,IAAKiD,EAAKjD,IACVsD,IAAI,YACJX,UAAWH,EAAQtC,aAG3B,kBAACqD,EAAA,EAAD,CACIC,MAAOP,EAAK1C,QACZ8C,QAAS,kBAAMZ,EAAgBC,WAK/C,kBAACe,EAAA,EAAD,CAAQC,QAhCI,WAChBrB,GAAQ,IA+B0BsB,kBAAgB,0BAA0BvB,KAAMA,GAC1E,yBAAKpC,IAAKD,EAAOuC,GAActC,IAAKsD,IAAI,iBCrGzCM,MATf,WAEE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,QCEckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,wC","file":"static/js/main.9474b33a.chunk.js","sourcesContent":["\r\nimport React, { useState, useEffect } from 'react'\r\nimport irfan from '../images/full/irfan.jpg'\r\nimport arya from '../images/full/arya.jpg'\r\nimport joker from '../images/full/joker.jpg'\r\nimport witcher from '../images/full/witcher.jpg'\r\nimport irfanTn from '../images/thumbnail/irfan_tn.jpg'\r\nimport aryaTn from '../images/thumbnail/arya_tn.jpg'\r\nimport jokerTn from '../images/thumbnail/joker_tn.jpg'\r\nimport witcherTn from '../images/thumbnail/witcher_tn.jpg'\r\nimport GridList from '@material-ui/core/GridList';\r\nimport { GridListTile, GridListTileBar, makeStyles } from '@material-ui/core';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Carousel, { Modal, ModalGateway } from 'react-images';\r\n\r\nconst IMAGES =\r\n    [{\r\n        src: irfan,\r\n        thumbnail: irfanTn,\r\n        thumbnailWidth: 350,\r\n        thumbnailHeight: 400,\r\n        isSelected: true,\r\n        caption: \"Irfan Khan\"\r\n    },\r\n    {\r\n        src: arya,\r\n        thumbnail: aryaTn,\r\n        thumbnailWidth: 320,\r\n        thumbnailHeight: 400,\r\n        caption: \"Arya Stark\"\r\n    },\r\n\r\n    {\r\n        src: joker,\r\n        thumbnail: jokerTn,\r\n        thumbnailWidth: 320,\r\n        thumbnailHeight: 400,\r\n        caption: \"Joker\"\r\n    },\r\n    {\r\n        src: witcher,\r\n        thumbnail: witcherTn,\r\n        thumbnailWidth: 500,\r\n        thumbnailHeight: 400,\r\n        caption: \"The Witcher\"\r\n    }\r\n    ]\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-around',\r\n        overflow: 'hidden',\r\n    },\r\n    gridList: {\r\n        // width: 500,\r\n        height: 550,\r\n    },\r\n    icon: {\r\n        color: 'rgba(255, 255, 255, 0.54)',\r\n    },\r\n    thumbnail: {\r\n        cursor: 'pointer',\r\n        maxWidth: '100%',\r\n    }\r\n}));\r\n\r\n\r\nconst MyGallery = props => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n    // const [selectedImage, setSelectedImage] = useState(IMAGES[currentIndex]);\r\n    const classes = useStyles();\r\n\r\n    const handleOpenImage = (index) => {\r\n        setOpen(true);\r\n        // setSelectedImage(imageObj);\r\n        setCurrentIndex(index)\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <GridList cellHeight={160} cols={4} spacing={30} className={classes.gridList}>\r\n                {IMAGES.map((tile, index) => (\r\n                    <GridListTile\r\n                        key={tile.img}\r\n                        cols={tile.cols || 1}\r\n                        className={classes.icon}\r\n                    >\r\n                        <Image\r\n                            src={tile.thumbnail}\r\n                            onClick={() => handleOpenImage(index)}\r\n                        >\r\n\r\n                            <img\r\n                                src={tile.src}\r\n                                alt=\"image_alt\"\r\n                                className={classes.thumbnail}\r\n                            />\r\n                        </Image>\r\n                        <GridListTileBar\r\n                            title={tile.caption}\r\n                            onClick={() => handleOpenImage(index)}\r\n                        />\r\n                    </GridListTile>\r\n                ))}\r\n            </GridList>\r\n            <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n                <img src={IMAGES[currentIndex].src} alt=\"image_alt\" />\r\n            </Dialog>\r\n            {/* <ModalGateway>\r\n                {open ? (\r\n                    <Modal onClose={handleClose}>\r\n                        <Carousel\r\n                            views={IMAGES}\r\n                            currentIndex={currentIndex}\r\n                            frameProps={{\r\n                                autoSize: 'height'\r\n                            }}\r\n                        />\r\n                    </Modal>\r\n                ) : null}\r\n            </ModalGateway> */}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nconst gutter = 2;\r\n\r\nconst Image = (props) => (\r\n    <div\r\n        style={{\r\n            backgroundColor: '#eee',\r\n            boxSizing: 'border-box',\r\n            overflow: 'hidden',\r\n            ':hover': {\r\n                opacity: 0.9,\r\n            },\r\n        }}\r\n        {...props}\r\n    />\r\n);\r\n\r\n\r\nexport default MyGallery\r\n","import React from 'react';\nimport './App.css';\nimport MyGallery from './Gallery/MyGallery';\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <MyGallery />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/irfan.2935f156.jpg\";","module.exports = __webpack_public_path__ + \"static/media/arya.825fd16c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/joker.f4e24cb3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/witcher.ef0815e0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/irfan_tn.487436d3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/arya_tn.62844fec.jpg\";","module.exports = __webpack_public_path__ + \"static/media/joker_tn.3abf1b11.jpg\";","module.exports = __webpack_public_path__ + \"static/media/witcher_tn.c154bd0d.jpg\";"],"sourceRoot":""}